# 工作流名称
name: Sync Upstream and Build Docker Image

# 触发工作流的事件
on:
  # 1. 定时触发：设置为每 3 小时运行一次
  # 1. 定时触发：设置为每 3 小时运行一次
  schedule:
    - cron: '0 */3 * * *'
  
  # 2. 手动触发：允许你在 GitHub Actions 页面点击按钮手动运行
  workflow_dispatch:

  # 3. 推送触发：当你修改此工作流文件并推送到 main 分支时触发
  push:
    branches: [ "main" ]

jobs:
  build-from-upstream:
    runs-on: ubuntu-latest

    # 为工作流步骤授予调用 GitHub API 所需的权限
    permissions:
      contents: write

    steps:
      # 第 1 步：检出你自己的仓库
      - name: Checkout this repo (for Dockerfile and entrypoint)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 获取所有历史记录，以便进行合并

      # 新增步骤：配置 Git 用户
      - name: Configure Git User
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      # 新增步骤：添加上游远程仓库并拉取更改
      - name: Add upstream remote and fetch
        run: |
          git remote add upstream https://github.com/InvertGeek/mixfilecli.git
          git fetch upstream

      # 新增步骤：合并上游更改到当前分支
      - name: Merge upstream changes
        run: |
          git merge upstream/master --allow-unrelated-histories -m "Merge upstream master into master"
          
      # 新增步骤：推送到当前仓库的 main 分支
      - name: Push changes to main branch
        run: |
          git push origin master

      # 第 2 步：获取上游仓库最新的 Commit SHA (现在在上游同步之后执行)
      - name: Get upstream commit SHA
        id: upstream-info
        run: |
          UPSTREAM_SHA=$(git rev-parse HEAD) # 获取当前仓库的最新 commit SHA
          echo "Latest upstream SHA is ${UPSTREAM_SHA}"
          echo "sha=${UPSTREAM_SHA}" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ github.token }}

      # 第 3 步：获取项目版本号
      - name: Get project version
        id: project-version
        run: |
          PROJECT_VERSION=$(grep -oP 'projectVersion = "\K[^"]+' build.gradle.kts)
          echo "Project version is ${PROJECT_VERSION}"
          echo "version=${PROJECT_VERSION}" >> $GITHUB_OUTPUT

      # 第 4 步：检查该版本的代码是否已经构建过
      - name: Check if image for this commit was already built
        id: cache-check
        uses: actions/cache@v4
        with:
          path: ~/.cache/dummy-path
          key: build-cache-${{ steps.upstream-info.outputs.sha }} # 缓存键只依赖于 commit SHA
          restore-keys: |
            build-cache-${{ steps.upstream-info.outputs.sha }}

      # 第 4 步：检出上游仓库的源代码 (此步骤不再需要，因为已经合并到当前仓库)
      # - name: Checkout upstream repo (for source code)
      #   if: steps.cache-check.outputs.cache-hit != 'true'
      #   uses: actions/checkout@v4
      #   with:
      #     repository: 'InvertGeek/mixfilecli'
      #     path: 'upstream_source'
      #     ref: ${{ steps.upstream-info.outputs.sha }}

      # 第 5 步：设置 JDK 17 环境
      - name: Set up JDK 17
        if: steps.cache-check.outputs.cache-hit != 'true'
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          
      # 第 6 步：设置 QEMU
      - name: Set up QEMU
        if: steps.cache-check.outputs.cache-hit != 'true'
        uses: docker/setup-qemu-action@v3

      # 第 7 步：设置 Docker Buildx
      - name: Set up Docker Buildx
        if: steps.cache-check.outputs.cache-hit != 'true'
        id: buildx
        uses: docker/setup-buildx-action@v3

      # 第 8 步：登录到 Docker Hub
      - name: Log in to Docker Hub
        if: steps.cache-check.outputs.cache-hit != 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 第 9 步：生成 Docker 镜像的元数据（标签）
      - name: Docker meta
        if: steps.cache-check.outputs.cache-hit != 'true'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/mfile
          tags: |
            type=raw,value=${{ steps.project-version.outputs.version }}
            type=sha,prefix=,suffix=,format=short
            type=raw,value=latest,enable=${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule' }}
            type=ref,event=branch,enable=${{ github.ref == 'refs/heads/master' }},suffix=-latest
            
      # 第 10 步：构建并推送多平台 Docker 镜像
      - name: Build and push multi-platform image
        if: steps.cache-check.outputs.cache-hit != 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          
      # 第 11 步：输出跳过信息
      - name: Build skipped
        if: steps.cache-check.outputs.cache-hit == 'true'
        run: |
          echo "Build skipped: An image for commit ${{ steps.upstream-info.outputs.sha }} has already been built."
