# 工作流名称
name: Sync Upstream and Build Docker Image

# 触发工作流的事件
on:
  # 1. 定时触发：使用 cron 语法，这里设置为每天 UTC 时间 6:00 运行一次
  schedule:
    - cron: '0 6 * * *'
  
  # 2. 手动触发：允许你在 GitHub Actions 页面点击按钮手动运行
  workflow_dispatch:

  # 3. 推送触发：当你修改此工作流文件并推送到 main 分支时触发
  push:
    branches: [ "main" ]

jobs:
  build-from-upstream:
    runs-on: ubuntu-latest

    steps:
      # 第 1 步：检出你自己的仓库
      # 目的是为了获取我们编写的 Dockerfile
      - name: Checkout this repo (for Dockerfile and entrypoint)
        uses: actions/checkout@v4

      # 第 2 步：检出上游仓库的源代码
      # 将 InvertGeek/mixfilecli 的最新代码下载到名为 'upstream_source' 的子目录中
      - name: Checkout upstream repo (for source code)
        uses: actions/checkout@v4
        with:
          repository: 'InvertGeek/mixfilecli'
          path: 'upstream_source'

      # 第 3 步：设置 JDK 17 环境
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 第 4 步：设置 QEMU (用于模拟不同 CPU 架构)
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # 第 5 步：设置 Docker Buildx (多平台构建器)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 第 6 步：登录到 Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 第 7 步：构建并推送多平台 Docker 镜像
      - name: Build and push multi-platform image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          # 关键：指定要构建的目标平台
          platforms: linux/amd64,linux/arm64
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/mfile:latest
