# 工作流名称
name: Sync Upstream and Build Docker Image

# 触发工作流的事件
on:
  # 1. 定时触发：设置为每 3 小时运行一次
  schedule:
    - cron: '0 */3 * * *'
  
  # 2. 手动触发：允许你在 GitHub Actions 页面点击按钮手动运行
  workflow_dispatch:

  # 3. 推送触发：当你修改此工作流文件并推送到 main 分支时触发
  push:
    branches: [ "main" ]

jobs:
  build-from-upstream:
    runs-on: ubuntu-latest

    # 为工作流步骤授予调用 GitHub API 所需的权限
    permissions:
      contents: read 

    steps:
      # 第 1 步：检出你自己的仓库
      - name: Checkout this repo (for Dockerfile and entrypoint)
        uses: actions/checkout@v4

      # 第 2 步：获取上游仓库最新的 Commit SHA
      - name: Get upstream commit SHA
        id: upstream-info
        run: |
          UPSTREAM_SHA=$(gh api repos/InvertGeek/mixfilecli/commits/main --jq .sha)
          echo "Latest upstream SHA is ${UPSTREAM_SHA}"
          echo "sha=${UPSTREAM_SHA}" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ github.token }}
      
      # 第 3 步：检查该版本的代码是否已经构建过
      - name: Check if image for this commit was already built
        id: cache-check
        uses: actions/cache@v4
        with:
          path: ~/.cache/dummy-path 
          key: build-cache-${{ steps.upstream-info.outputs.sha }}

      # 第 4 步：检出上游仓库的源代码
      - name: Checkout upstream repo (for source code)
        if: steps.cache-check.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          repository: 'InvertGeek/mixfilecli'
          path: 'upstream_source'
          ref: ${{ steps.upstream-info.outputs.sha }}

      # 第 5 步：设置 JDK 17 环境
      - name: Set up JDK 17
        if: steps.cache-check.outputs.cache-hit != 'true'
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          
      # 第 6 步：设置 QEMU
      - name: Set up QEMU
        if: steps.cache-check.outputs.cache-hit != 'true'
        uses: docker/setup-qemu-action@v3

      # 第 7 步：设置 Docker Buildx
      - name: Set up Docker Buildx
        if: steps.cache-check.outputs.cache-hit != 'true'
        id: buildx
        uses: docker/setup-buildx-action@v3

      # 第 8 步：登录到 Docker Hub
      - name: Log in to Docker Hub
        if: steps.cache-check.outputs.cache-hit != 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 第 9 步：生成 Docker 镜像的元数据（标签）
      - name: Docker meta
        if: steps.cache-check.outputs.cache-hit != 'true'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/mfile
          tags: |
            type=schedule,pattern=latest
            type=sha,prefix=,suffix=,format=short
            
      # 第 10 步：构建并推送多平台 Docker 镜像
      - name: Build and push multi-platform image
        if: steps.cache-check.outputs.cache-hit != 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          
      # 第 11 步：输出跳过信息
      - name: Build skipped
        if: steps.cache-check.outputs.cache-hit == 'true'
        run: echo "Build skipped: An image for commit ${{ steps.upstream-info.outputs.sha }} has already been built."
